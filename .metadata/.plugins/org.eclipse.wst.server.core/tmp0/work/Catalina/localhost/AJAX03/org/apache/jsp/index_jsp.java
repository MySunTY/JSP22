/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.89
 * Generated at: 2024-06-20 05:43:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>Dynamic XML parse</title>\r\n");
      out.write("		<!-- 쇼핑몰에서 가격대 번위 설정해서 검색해보는 거 만들어보기 -->\r\n");
      out.write("		<style>\r\n");
      out.write("			td{\r\n");
      out.write("				border:1px solid black;\r\n");
      out.write("				margin-right : 20px;\r\n");
      out.write("				padding :5px;\r\n");
      out.write("			}\r\n");
      out.write("		</style>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("	<h1>원하시는 가격대를 선택해 주세요</h1>\r\n");
      out.write("	\r\n");
      out.write("	<select>\r\n");
      out.write("		<option value=\"500000\">500000</option>\r\n");
      out.write("		<option value=\"1500000\">1500000</option>\r\n");
      out.write("		<option value=\"2500000\">2500000</option>\r\n");
      out.write("	</select>\r\n");
      out.write("	에서\r\n");
      out.write("		<select>\r\n");
      out.write("		<option value=\"1000000\">1000000</option>\r\n");
      out.write("		<option value=\"2000000\">2000000</option>\r\n");
      out.write("		<option value=\"3000000\">3000000</option>\r\n");
      out.write("	</select>\r\n");
      out.write("	까지\r\n");
      out.write("	<input type=\"button\" value=\"조회\" onclick=\"search()\">\r\n");
      out.write("	<div id=\"header\">\r\n");
      out.write("		\r\n");
      out.write("	</div>\r\n");
      out.write("	<p id=\"tableBody\"></p>\r\n");
      out.write("	\r\n");
      out.write("		<script>\r\n");
      out.write("			var XHR;\r\n");
      out.write("			function createXMLHttpRequest(){\r\n");
      out.write("				if(window.ActiveXObject){\r\n");
      out.write("					XHR=new ActiveXObject(\"microsoft.XMLHTTP\");\r\n");
      out.write("				}else if(window.XMLHttpRequest){\r\n");
      out.write("					XHR=new XMLHttpRequest();  \r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			 \r\n");
      out.write("			\r\n");
      out.write("			function search(){\r\n");
      out.write("				createXMLHttpRequest();\r\n");
      out.write("				XHR.onreadystatechange=handleStateChange;\r\n");
      out.write("				XHR.open(\"GET\",\"sample.xml\",true);\r\n");
      out.write("				XHR.send(null)\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("			function handleStateChange(){\r\n");
      out.write("				if(XHR.readyState==4){\r\n");
      out.write("					if(XHR.status==200){\r\n");
      out.write("						//console.log(XHR.responseXML);\r\n");
      out.write("						clear(); // 이전에 적혀있던 화면의 내용을 지우는 기능\r\n");
      out.write("						parseResult(); //검색 결과를 추려내서 화면에 표시하는기능\r\n");
      out.write("						\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			function parseResult(){ //XHR.responseXML을 통해 들어온 XML을 DOM으로 쪼개어 원하는 결과만 추출\r\n");
      out.write("				var result = XHR.responseXML;\r\n");
      out.write("				var product = null; // product는 object / object를 초기값 null로 잡아서 아래 데이터들(name등등)과 한눈에 구분\r\n");
      out.write("				var name=\"\";\r\n");
      out.write("				var price = \"\";\r\n");
      out.write("				var comments=\"\";\r\n");
      out.write("				\r\n");
      out.write("				var products= result.getElementsByTagName(\"product\");\r\n");
      out.write("				for(var i = 0 ; i<products.length; i++){\r\n");
      out.write("					product = products[i];\r\n");
      out.write("					name = product.getElementsByTagName(\"name\")[0].firstChild.nodeValue;\r\n");
      out.write("					price = product.getElementsByTagName(\"price\")[0].firstChild.nodeValue;\r\n");
      out.write("					comments = product.getElementsByTagName(\"comments\")[0].firstChild.nodeValue;\r\n");
      out.write("					addTable(name,price,comments);\r\n");
      out.write("					\r\n");
      out.write("				}\r\n");
      out.write("				//태그를 제작해서 화면에 출력하는 방법\r\n");
      out.write("				var header = document.createElement(\"h2\");\r\n");
      out.write("				var headerText= document.createTextNode(\"검색 결과 : \");\r\n");
      out.write("				header.appendChild(headerText);\r\n");
      out.write("				document.getElementById(\"header\").appendChild(header);\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("			//검색 기준점을 받아 해당하는 내용을 테이블로 그리는 함수\r\n");
      out.write("			\r\n");
      out.write("			function addTable(name,price,comments){\r\n");
      out.write("				var min = document.getElementsByTagName(\"select\")[0].value; //검색 최소값\r\n");
      out.write("				var max = document.getElementsByTagName(\"select\")[1].value; //검색 최대값\r\n");
      out.write("				var int_price = parseInt(price);\r\n");
      out.write("				//console.log(\"검색 최소값 : \"+min);\r\n");
      out.write("				//console.log(\"검색 최대값 : \"+max);\r\n");
      out.write("				//console.log(name+\"가격 \"+price);\r\n");
      out.write("				//console.log(\"검색 여부 \" +(min<=int_price && int_price<=max));\r\n");
      out.write("				if(min<=int_price && int_price<=max){\r\n");
      out.write("					var row = document.createElement(\"tr\");\r\n");
      out.write("					var td= makeTd(name);\r\n");
      out.write("					row.appendChild(td);\r\n");
      out.write("					td=makeTd(price);\r\n");
      out.write("					row.appendChild(td);\r\n");
      out.write("					td=makeTd(comments);\r\n");
      out.write("					row.appendChild(td);\r\n");
      out.write("					\r\n");
      out.write("					document.getElementById(\"tableBody\").appendChild(row);\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("			function makeTd(text){\r\n");
      out.write("				var td= document.createElement(\"td\");\r\n");
      out.write("				var text_node= document.createTextNode(text);\r\n");
      out.write("				td.appendChild(text_node);\r\n");
      out.write("				\r\n");
      out.write("				return td;\r\n");
      out.write("			}\r\n");
      out.write("			function clear(){\r\n");
      out.write("				var header = document.getElementById(\"header\");\r\n");
      out.write("				if(header.hasChildNodes()){\r\n");
      out.write("					header.removeChild(header.childNodes[0]);\r\n");
      out.write("				}\r\n");
      out.write("				var tableBody = document.getElementById(\"tableBody\");\r\n");
      out.write("				while(tableBody.childNodes.length>0){\r\n");
      out.write("					tableBody.removeChild(tableBody.childNodes[0]);\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		</script>\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
